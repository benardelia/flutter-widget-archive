import 'package:flutter/material.dart';

/// Chart import.
import 'package:syncfusion_flutter_charts/charts.dart';




class CRadialChart extends StatefulWidget {
  const CRadialChart({super.key});

  @override
  State<CRadialChart> createState() => _CRadialChartState();
}

class _CRadialChartState extends State<CRadialChart> {
   TooltipBehavior? _tooltipBehavior;
  List<ChartSampleData>? _chartData;

  @override
  void initState() {
     _tooltipBehavior = TooltipBehavior(
      enable: true,
      format: 'point.x',
    );
    _chartData = <ChartSampleData>[
      ChartSampleData(
        x: 'Move 65%\n338/520 CAL',
        y: 65,
        text: 'Move  ',
        pointColor: const Color.fromRGBO(0, 201, 230, 1.0),
      ),
      ChartSampleData(
        x: 'Exercise 43%\n13/30 MIN',
        y: 43,
        text: 'Exercise  ',
        pointColor: const Color.fromRGBO(63, 224, 0, 1.0),
      ),
      ChartSampleData(
        x: 'Stand 58%\n7/12 HR',
        y: 58,
        text: 'Stand  ',
        pointColor: const Color.fromRGBO(226, 1, 26, 1.0),
      ),
    ];
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return SfCircularChart(
      title: ChartTitle(text: 'Activity tracker'),

      /// To enable the legend for radial bar series.
      legend: const Legend(
        isVisible: true,
        iconHeight: 20,
        iconWidth: 20,
        overflowMode: LegendItemOverflowMode.wrap,
      ),
      tooltipBehavior: _tooltipBehavior,
      series: _buildRadialBarSeries(),
    );
  }

  List<RadialBarSeries<ChartSampleData, String>> _buildRadialBarSeries() {
    final List<RadialBarSeries<ChartSampleData, String>> list =
        <RadialBarSeries<ChartSampleData, String>>[
      RadialBarSeries<ChartSampleData, String>(
        dataSource: _chartData,
        xValueMapper: (ChartSampleData data, int index) => data.x,
        yValueMapper: (ChartSampleData data, int index) => data.y,
        pointColorMapper: (ChartSampleData data, int index) => data.pointColor,
        dataLabelMapper: (ChartSampleData data, int index) => data.text,
        dataLabelSettings: const DataLabelSettings(isVisible: true),
        animationDuration: 0,
        maximumValue: 100,
        radius: '100%',
        gap: '2%',
        innerRadius: '30%',
        cornerStyle: CornerStyle.bothCurve,
      )
    ];
    return list;
  }

}

///Chart sample data
class ChartSampleData {
  /// Holds the datapoint values like x, y, etc.,
  ChartSampleData(
      {this.x,
      this.y,
      this.xValue,
      this.yValue,
      this.secondSeriesYValue,
      this.thirdSeriesYValue,
      this.pointColor,
      this.size,
      this.text,
      this.open,
      this.close,
      this.low,
      this.high,
      this.volume});

  /// Holds x value of the datapoint
  final dynamic x;

  /// Holds y value of the datapoint
  final num? y;

  /// Holds x value of the datapoint
  final dynamic xValue;

  /// Holds y value of the datapoint
  final num? yValue;

  /// Holds y value of the datapoint(for 2nd series)
  final num? secondSeriesYValue;

  /// Holds y value of the datapoint(for 3nd series)
  final num? thirdSeriesYValue;

  /// Holds point color of the datapoint
  final Color? pointColor;

  /// Holds size of the datapoint
  final num? size;

  /// Holds datalabel/text value mapper of the datapoint
  final String? text;

  /// Holds open value of the datapoint
  final num? open;

  /// Holds close value of the datapoint
  final num? close;

  /// Holds low value of the datapoint
  final num? low;

  /// Holds high value of the datapoint
  final num? high;

  /// Holds open value of the datapoint
  final num? volume;
}

/// Chart Sales Data
class SalesData {
  /// Holds the datapoint values like x, y, etc.,
  SalesData(this.x, this.y, [this.date, this.color]);

  /// X value of the data point
  final dynamic x;

  /// y value of the data point
  final dynamic y;

  /// color value of the data point
  final Color? color;

  /// Date time value of the data point
  final DateTime? date;
}
